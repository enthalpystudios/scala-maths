package net.projecteuler.problem12

import org.scalatest.{Matchers, WordSpec}

/**
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
  */
class HighlyDivisibleTriangularNumberSpec extends WordSpec with Matchers {

  "Highly Divisible Triangle Number" should {

    "return 1 as triangle number" when {

      "looking for the first triangle number" in {

        val nth = 1
        val nthTriangleNumber = HighlyDivisibleTriangleNumberFinder.find(nth)

        nthTriangleNumber should be(1)

      }

    }

    "return 28 as triangle number" when {

      "looking for the seventh triangle number" in {

        val nth = 7
        val nthTriangleNumber = HighlyDivisibleTriangleNumberFinder.find(nth)

        nthTriangleNumber should be(28)

      }

    }

    "return list of factors for the first 7 triangular numbers" when {

      "looking for the seven triangular factors" in {

        val nth = 7
        val factors = HighlyDivisibleTriangleNumberFinder.factorsOf(nth)

        val expectedFactors = List(
          List(1),
          List(1,3),
          List(1,2,3,6),
          List(1,2,5,10),
          List(1,3,5,15),
          List(1,3,7,21),
          List(1,2,4,7,14,28)
        )

        factors should be(expectedFactors)

      }

    }

    "return the triangle number whose number of divisors is bigger than the 5" when {

      "looking for the triangle number that should be 38" in {

        val divisors = 5
        val triangleNumber: Int = HighlyDivisibleTriangleNumberFinder.containingNumberOfDivisors(divisors)

        triangleNumber should be(28)

      }

    }

    "return the triangle number whose number of divisors is bigger than the 500" when {

      "looking for the triangle number that should be 38" in {

        val divisors = 500
        val triangleNumber: Int = HighlyDivisibleTriangleNumberFinder.containingNumberOfDivisors(divisors)

        triangleNumber should be(76576500)

      }

    }

  }

}
